<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <title>ChatVerse</title>
  <link rel="icon" href="/uploads/logo.png" />
  <link rel="stylesheet" href="/privatechat.css" />
  <link rel="icon" type="image/jpg" href="/downloa.jpg" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"/>
</head>
<body>
  <div class="chatverse-container">
    <aside class="sidebar">
      <div class="logo">ðŸ’¬ <span>ChatVerse</span></div>
      <div class="welcome-bar">
        <div class="Welcome-name">Welcome, <%= currentUser.username %>!</div>
        <div class="logout">
          <form action="/logout" method="POST">
            <button type="submit">Logout</button>
          </form>
        </div>
      </div>
      <div class="search">
        <input type="text" id="user-search" placeholder="Search users..." />
      </div>
      <% const hasOnlineUsers = users.some(user => user.username !== currentUser.username && onlineUserIds.includes(user._id.toString())); %>
      <% if (hasOnlineUsers) { %>
        <h4>ðŸŸ¢ Online Users</h4>
      <% } %>
      <ul id="users-list-online">
        <% users.forEach(user => {
          if (user.username !== currentUser.username && onlineUserIds.includes(user._id.toString())) { %>
          <li class="user-card online" data-username="<%= user.username.toLowerCase() %>" data-user-id="<%= user._id %>">
            <a href="/<%= currentUser._id %>/privatechat/<%= user._id %>">
              <div class="user-info">
                <img src="/uploads/<%= user.gender === 'male' ? 'download.jpg' : 'female.jpg' %>" class="user-avatar" />
                <span class="user-name"><%= user.username %></span>
              </div>
            </a>
          </li>
        <% } }); %>
      </ul>

      <% if (users.some(user => user.username !== currentUser.username && !onlineUserIds.includes(user._id.toString()))) { %>
        <h4>ðŸ”´ Offline Users</h4>
      <% } %>
      <ul id="users-list-offline">
        <% users.forEach(user => {
          if (user.username !== currentUser.username && !onlineUserIds.includes(user._id.toString())) { %>
          <li class="user-card offline" data-username="<%= user.username.toLowerCase() %>" data-user-id="<%= user._id %>">
            <a href="/<%= currentUser._id %>/privatechat/<%= user._id %>">
              <div class="user-info">
                <img src="/uploads/<%= user.gender === 'male' ? 'download.jpg' : 'female.jpg' %>" class="user-avatar" />
                <span class="user-name"><%= user.username %></span>
              </div>
            </a>
          </li>
        <% } }); %>
      </ul>
    </aside>

    <main class="chat-area">
      <div class="chat-header">
        <a class="back-button" href="/users"><i class="fa-solid fa-arrow-left"></i></a>
        <h3><%= user.username %> <span id="user-status">âšª Offline</span></h3>
      </div>

      <div id="chat-box">
        <% chats.forEach(chat => {
          const isSent = chat.from._id.toString() === currentUser._id.toString();
          const isUnread = chat.to._id.toString() === currentUser._id.toString() && chat.status !== 'read';
          const time = new Date(chat.createdAt).toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Kolkata' });
        %>
          <div class="message <%= isSent ? 'sent' : 'received' %>" data-message-id="<%= chat._id %>" data-is-unread="<%= isUnread %>">
            <div><%= chat.msg %></div>
            <div class="meta">
              <span class="time"><%= time %></span>
              <% if (isSent) { %>
                <% const isDelivered = chat.status === 'delivered'; %>
                <% const isRead = chat.status === 'read'; %>
                <span class="tick <%= isRead ? 'read' : '' %>">
                  <%= isDelivered || isRead ? 'âœ”âœ”' : 'âœ”' %>
                </span>
              <% } %>
            </div>
          </div>
        <% }); %>
      </div>

      <form id="form">
        <input id="input" autocomplete="off" placeholder="Type a message..." />
        <button type="submit">Send</button>
      </form>
    </main>
  </div>

  <audio id="chat-sound" src="/uploads/message-send-292621.mp3" preload="auto"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const chatBox = document.getElementById('chat-box');
    const input = document.getElementById('input');
    const form = document.getElementById('form');
    const chatSound = document.getElementById('chat-sound');
    const currentUserId = '<%= currentUser._id %>';
    const otherUserId = '<%= user._id %>';

    function playSound() {
      chatSound.currentTime = 0;
      chatSound.play().catch(e => console.log("Sound blocked:", e));
    }

    socket.emit('register', currentUserId);

    window.addEventListener('load', () => {
      document.querySelectorAll('[data-is-unread="true"]').forEach(msg => {
        socket.emit('read message', { messageId: msg.dataset.messageId });
      });
      chatBox.scrollTop = chatBox.scrollHeight;
    });

    form.addEventListener('submit', e => {
      e.preventDefault();
      const message = input.value.trim();
      if (message) {
        socket.emit('private message', {
          from: currentUserId,
          to: otherUserId,
          msg: message
        });
        input.value = '';
        playSound();
      }
    });

    socket.on('private message', data => {
      const time = new Date(data.createdAt).toLocaleTimeString('en-IN', {
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Asia/Kolkata'
      });

      const messageElement = document.createElement('div');
      messageElement.classList.add('message', data.from === currentUserId ? 'sent' : 'received');
      messageElement.dataset.messageId = data._id;

      const isSentByMe = data.from === currentUserId;
      const tickHTML = isSentByMe
        ? `<span class="tick ${data.status === 'read' ? 'read' : ''}">
            ${data.status === 'read' || data.status === 'delivered' ? 'âœ”âœ”' : 'âœ”'}
          </span>` : '';

      messageElement.innerHTML = `
        <div>${data.msg}</div>
        <div class="meta">
          <span class="time">${time}</span>
          ${tickHTML}
        </div>
      `;

      chatBox.appendChild(messageElement);
      chatBox.scrollTop = chatBox.scrollHeight;

      if (data.to === currentUserId) {
        socket.emit('read message', { messageId: data._id });
      }

      playSound();
    });

    socket.on('message read', ({ messageId }) => {
      const message = document.querySelector(`[data-message-id="${messageId}"]`);
      if (message) {
        const tick = message.querySelector('.tick');
        if (tick) {
          tick.textContent = 'âœ”âœ”';
          tick.classList.add('read');
        }
      }
    });

    socket.on('user status', ({ userId, status }) => {
      if (userId === otherUserId) {
        document.getElementById('user-status').textContent = status === 'online' ? 'ðŸŸ¢ Online' : 'âšª Offline';
      }
    });

    document.getElementById('user-search').addEventListener('input', e => {
      const query = e.target.value.toLowerCase();
      document.querySelectorAll('.user-card').forEach(card => {
        card.style.display = card.dataset.username.includes(query) ? 'block' : 'none';
      });
    });

    document.getElementById('input').addEventListener('focus', () => {
      setTimeout(() => {
        input.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, 300);
    });
  </script>
</body>
</html>
